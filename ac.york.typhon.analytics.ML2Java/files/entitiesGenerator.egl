package ac.york.typhon.analytics.commons.datatypes;

import java.util.ArrayList;
import java.util.Date;

import ac.york.typhon.analytics.commons.datatypes.*;
import ac.york.typhon.analytics.commons.datatypes.events.Entity;

public class [%=entity.name.println%] extends Entity{
[%
var types = new Map();
types.put("StringType", "String");
types.put("IntType", "Integer");
types.put("BoolType", "Boolean");
types.put("FloatType", "Double");
types.put("BigintType", "Integer");

types.put("FreetextType", "String");
types.put("TextType", "String");

types.put("BlobType","String");

//the ql ast should be updated to use their datetime objects instead in the future
types.put("DateType", "String");
//the ql ast should be updated to use their datetime objects instead in the future
types.put("DatetimeType", "String");

types.put("PointType", "Point");
types.put("PolygonType", "Polygon");

//TODO for cursom types we would need to somehow find out their names

for (anAttribute in entity.attributes) { 
	%]
	private [%=types.get(anAttribute.type.type.name.println)%] [%=anAttribute.name%];
	
	public [%=types.get(anAttribute.type.type.name)%] get[%=anAttribute.name.firstToUpperCase()%]() {
		return this.[%=anAttribute.name%];
	}
	
	public void set[%=anAttribute.name.firstToUpperCase()%]([%=types.get(anAttribute.type.type.name)%] [%=anAttribute.name%]) {
		this.[%=anAttribute.name%] = [%=anAttribute.name%];
	}
[%
}
for (aRelation in entity.relations) {
	if (aRelation.cardinality == Cardinality#zero_one or aRelation.cardinality == Cardinality#one) { %]
	
	private [%=aRelation.type.name%] [%=aRelation.name%];
	
	public [%=aRelation.type.name%] get[%=aRelation.name.firstToUpperCase()%]() {
		return this.[%=aRelation.name%];
	}
	
	public void set[%=aRelation.name.firstToUpperCase()%]([%=aRelation.type.name%] [%=aRelation.name%]) {
		this.[%=aRelation.name%] = [%=aRelation.name%];
	}
	[%
	} else { %]
	
	private ArrayList<[%=aRelation.type.name%]> [%=aRelation.name%];
	
	public ArrayList<[%=aRelation.type.name%]> get[%=aRelation.name.firstToUpperCase()%]() {
		return this.[%=aRelation.name%];
	}
	
	public void set[%=aRelation.name.firstToUpperCase()%](ArrayList<[%=aRelation.type.name%]> [%=aRelation.name%]) {
		this.[%=aRelation.name%] = [%=aRelation.name%];
	}
	[%
	}
}
%]

	public String toString() { 
		String result = "";
		[%
		var result = "\""+entity.name+"(\"+";
		for (anAttribute in entity.attributes) { 
			result = result + "\" " + anAttribute.name + ": \" + " + anAttribute.name;
			if(hasMore) {
				result = result + " + ";
			}
		}
		if(not entity.relations.isEmpty()){
			result = result + " + ";
		}
		for (aRel in entity.relations) { 
			result = result + "\" " + aRel.name + ": \" + " + aRel.name;
			if(hasMore) {
				result = result + " + ";
			}
		}	
	
	%]	
		result = [%=result%] + " previousvalue: " + getPreviousValue() + " uuid: " + getUUID() + ")";
		return result;
	}
}

